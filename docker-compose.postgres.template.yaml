services:
  # PostgreSQL for Development
  postgres_dev:
    image: postgres
    container_name: multi_db_nodejs_express_with_typescript_template__postgres_dev
    ports:
      - '5433:5432'
    networks:
      - backend_net
    environment:
      POSTGRES_USER: your-user-name
      POSTGRES_PASSWORD: your-password
      POSTGRES_DB: multi_db_nodejs_express_with_typescript_template__db_dev
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your-user-name"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Staging
  postgres_staging:
    image: postgres
    container_name: multi_db_nodejs_express_with_typescript_template__postgres_staging
    ports:
      - '5434:5432'
    networks:
      - backend_net
    environment:
      POSTGRES_USER: your-user-name
      POSTGRES_PASSWORD: your-password
      POSTGRES_DB: multi_db_nodejs_express_with_typescript_template__db_staging
    volumes:
      - pgdata_staging:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your-user-name"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Production
  postgres_prod:
    image: postgres
    container_name: multi_db_nodejs_express_with_typescript_template__postgres_prod
    ports:
      - '5435:5432'
    networks:
      - backend_net
    environment:
      POSTGRES_USER: your-user-name
      POSTGRES_PASSWORD: your-password
      POSTGRES_DB: multi_db_nodejs_express_with_typescript_template__db_prod
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your-user-name"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js/Express Application
  # app_server:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: multi_db_nodejs_express_with_typescript_template__app
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     postgres_dev:
  #       condition: service_healthy
  #     postgres_staging:
  #       condition: service_healthy
  #     postgres_prod:
  #       condition: service_healthy
  #   environment:
  #     POSTGRES_DEV_URI: postgres://your-user-name:your-password@postgres_dev:5432/multi_db_nodejs_express_with_typescript_template__db_dev
  #     POSTGRES_STAGING_URI: postgres://your-user-name:your-password@postgres_staging:5432/multi_db_nodejs_express_with_typescript_template__db_staging
  #     POSTGRES_PROD_URI: postgres://your-user-name:your-password@postgres_prod:5432/multi_db_nodejs_express_with_typescript_template__db_prod
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   command: npm run dev
  #   networks:
  #     - backend_net

volumes:
  pgdata_dev:
  pgdata_staging:
  pgdata_prod:

networks:
  backend_net:
    driver: bridge
