# =========================================================================================================
# ðŸ“ŒðŸ“ŒðŸ“Œ DO NOT FORGET TO HIDE(GIT-IGNORE) ALL .env files from your version-control-system, and other project 
# build set-ups like prettier and eslint. Do so immediately your start your project. ðŸ“ŒðŸ“ŒðŸ“Œ
# 
# The environment variables are left open in the template, to guide you on exactly how they were 
# configured to work. 
# ==========================================================================================================

# =========================================================================================================
# The template comes with 4 '.env' files. The main one(`.env) is a core/central environment selection file. All 
# it does is to help you select your preferred working environment from one of 'development', 'staging', and 'production'.
#
# All the others are for the three main environments(development, staging, and production) that is assumed you'll 
# be working from. This gives you the flexibility to test any of the environments locally with much ease.
# 
# Simply un-comment the line for your preferred working/testing environment, and you'll be right on it.
#
# The project has been pre-configured(see src -> app.ts) to select one from the 3 .env files based on the
# environment you un-comment below. By default, the 'development' environment is un-commented/selected.
#
# BELOW: UN-COMMENT YOUR PREFERRED ENVIRONMENT, AND THE PROJECT WILL SELECT/USE THE CORRESPONDING .env FILE
# ==========================================================================================================

NODE_ENV="development"
# NODE_ENV="staging"
# NODE_ENV="production"

# =================================================================================================
# All the below content are prisma injections, except for some extra additions. 
#
# Since the project is configured to use multiple .env files, ensure to always run prisma, with the 
# appropriate environment flag to avoid errors.
#
# E.g. npx prisma generate --env-file=.env.staging
#
# BELOW: PRISMA INJECTIONS - WITH RELEVANT UPDATES
# =================================================================================================

# This was inserted by prisma init:
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# =================================================================================================
# prisma injection: not used as injected - updated to POSTGRES_DATABASE_URL - see below.
# DATABASE_URL="postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public"
#
# template setup: use in prima as below
# POSTGRES_DATABASE_URL=postgresql://user-name:password@localhost:5432/multi_db_nodejs_template_postgres_db_dev?schema=public 
#
# I.e(see prisma -> prisma.schema). 
#
# datasource db {
#   provider = "postgresql"
#   url      = env("POSTGRES_DATABASE_URL") | not -> url      = env("DATABASE_URL")
# }
# =================================================================================================